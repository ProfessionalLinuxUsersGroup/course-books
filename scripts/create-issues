#!/bin/bash
#===============================================================================
#
#          FILE:  create-issues
#       VERSION:  1.3.1
#
#         USAGE:  ./create-issues OPTIONS
#
#   DESCRIPTION:  Helper script to create issues for unit intros, worksheets, 
#                 labs, and bonuses. Generates issue(s) of a given type(s) for
#                 the ProLUG course-books repository.
#                 Must be authenticated via 'gh auth login', with a PAT with 
#                 correct access.  
#
#       OPTIONS:
#           -u | --unit UNIT_NUMBER     Specify the unit number for the issue.
#                                       Required unless provided interactively.
#
#           -t | --type TYPE            Specify the type of document for the issue. 
#                                       One of:
#                                         - intro     (üëã  file: u<UNIT>intro.md)
#                                         - worksheet (üìÑ  file: u<UNIT>ws.md)
#                                         - lab       (üß™  file: u<UNIT>lab.md)
#                                         - bonus     (üçí  file: u<UNIT>b.md)
#                                         - all       (create one issue per type)
#                                       Set to 'all' to create an issue of each type.
#                                       Required unless provided interactively.
#
#           -b | --book BOOK            Specify the book the issue is targeting.
#                                       Valid options:
#                                         - lac | admin       (labels: [LAC],   "admin")
#                                         - psc | security    (labels: [PSC],   "security")
#                                         - pcae | automation (labels: [PCAE],  "automation")
#
#           -a | --all                  Alias for '--type all'.
#
#           -h, --help                  Show usage and exit.
#
#  REQUIREMENTS:  bash >= 4.0, GNU coreutils, perl >= 5.x (tested with >=5.10),
#                 gh >= 2.4.0, authenticated via `gh auth login` with a PAT
#                 with "repo" scope.
#        AUTHOR:  Connor W. (https://github.com/kolkhis)
#       CREATED:  2025-04-23
#
#===============================================================================

usage() {
    cat <<- EOF
	NAME: create-issues
	USAGE:
	  ./scripts/create-issues [-b|--book BOOK] [-t|--type TYPE] [-u|--unit UNIT] [-a|--all]
	
	OPTIONS:
	    -u | --unit UNIT_NUMBER     Specify the unit number for the issue 
	
	    -t | --type TYPE            Specify the type of document for the issue 
	                                This can be one of 'worksheet', 'lab', 'intro', 'bonus'.
	                                Set to 'all' to create an issue of each type.
	
	    -b | --book BOOK            Specify the book the issue is for
	                                Valid options: lac|admin, psc|security, pcae|automation, 
	
	    -a | --all                  Shorthand for '--type all'
	
	SYNOPSIS:
	Creates an issue for the upstream repo. The 'gh' tool must be configured beforehand.
	EOF
}

declare -i UNIT
declare TYPE
declare TYPE_LABEL
declare BOOK
declare BOOK_LABEL
declare FILE
declare EMOJI

declare -a ALL_TYPES=('intro' 'worksheet' 'lab' 'bonus')

_set_type_vars() {
    # Pass in $TYPE
    case $1 in
        ws|worksheet)
            TYPE='worksheet'
            FILE="u${UNIT}ws.md"
            EMOJI="üìÑ"
            TYPE_LABEL="Worksheet"
            ;;
        l|lab)
            TYPE='lab'
            FILE="u${UNIT}lab.md"
            EMOJI="üß™"
            TYPE_LABEL="Lab"
            ;;
        i|intro)
            TYPE='intro'
            FILE="u${UNIT}intro.md"
            EMOJI="üëã"
            TYPE_LABEL="Intro"
            ;;
        b|bonus)
            TYPE='bonus'
            FILE="u${UNIT}b.md"
            EMOJI="üçí"
            TYPE_LABEL="Bonus"
            ;;
    esac
}

while [[ -n $1 ]]; do
    case $1 in
        -u|-unit|--unit)
            { [[ -n $2 && ! $2 =~ ^- ]] && UNIT=$2 && shift; } || {
                printf >&2 "[ERROR]: Missing or bad argument to -u/--unit.\n"
                exit 1
            }
            shift;
            ;;
        -t|-type|--type)
            { [[ -n $2 && ! $2 =~ ^- ]] && TYPE=$2 && shift; } || {
                printf >&2 "[ERROR]: Missing or bad argument to -t/--type.\n"
                exit 1
            } 
            shift; 
            ;;
        -a|-all|--all)
            TYPE="all"
            shift;
            ;;
        -b|-book|--book)
            { [[ -n $2 && ! $2 =~ ^- ]] && BOOK=$2 && shift; } || {
                printf >&2 "[ERROR]: Missing or bad argument to -b/--book.\n"
                exit 1
            }
            if ! [[ "$BOOK" =~ ((lac|admin)|(psc|security)|(pcae|automation)) ]]; then
                printf >&2 "[ERROR]: Bad argument to -b/--book!\n"
                exit 1
            fi
            shift;
            ;;
        -h|--help)
            usage && exit 0
            ;;
    esac
done

[[ -z $UNIT ]] && read -r -p "Enter unit number: " UNIT;  
[[ -z $TYPE ]] && read -r -p "Enter type (ws/lab/intro/bonus/all): " TYPE;  
[[ -z $BOOK ]] && read -r -p "Enter book (lac/psc/pcae): " BOOK;  
[[ -z $TYPE || -z $UNIT ]] && printf >&2 "[ERROR]: Missing Type or Unit!\n" && exit 1

case "${BOOK,,}" in
    lac|admin)
        BOOK='[LAC]'
        BOOK_LABEL='admin'
        ;;
    psc|security)
        BOOK='[PSC]' 
        BOOK_LABEL='security'
        ;;
    pcae|automation)
        BOOK='[PCAE]'
        BOOK_LABEL='automation'
        ;;
esac

create() {
    local labels="$BOOK_LABEL,$TYPE_LABEL,Unit $UNIT,help wanted,enhancement"
    local title="${BOOK^^} Unit ${UNIT} ${TYPE^} ${EMOJI} (${FILE})"
    local issue_body="
See the reference page for ${TYPE} files at:
<https://github.com/ProfessionalLinuxUsersGroup/course-books/wiki/${TYPE^}-Reference-Page>

If the file does not exist, please create it.
Once added, ensure the \`${FILE}\` file is present and uncommented in the \`nav\` section of \`mkdocs.yml\` in the appropriate place." 

    gh issue create \
        --title "${title}" \
        --label "${labels}" \
        --body "$issue_body" || {
        printf >&2 "[ERROR]: Failed to create issue!\n"
        return 1
    }

}

if [[ "${TYPE,,}" == "all" ]]; then
    for t in "${ALL_TYPES[@]}"; do
        _set_type_vars "$t"
        create
    done
    printf "Successfully created all issues for unit %s.\n" "$UNIT"
    exit 0
else
    _set_type_vars "$TYPE"
    create
    printf "Successfully created %s issue for unit %s.\n" "$TYPE" "$UNIT"
    exit 0
fi

